// graph using matrix
// #include <stdio.h>
// #define n 100

// int graph[n][n];

// void initializeMatrix(int nodes) 
// {
//     for (int i = 0; i < nodes; i++) 
//     {
//         for (int j = 0; j < nodes; j++) 
//         {
//             graph[i][j] = 0; 
//         }
//     }
// }

// void addEdge(int from, int to) 
// {
//     graph[from][to] = 1; 
// }

// int main() 
// {
//     int nodes, edges;

//     printf("Enter the number of nodes: ");
//     scanf("%d", &nodes);

//     printf("Enter the number of edges: ");
//     scanf("%d", &edges);

//     initializeMatrix(nodes); 

//     printf("Enter edges in the format 'from to':\n");
//     for (int i = 0; i < edges; i++) 
//     {
//         int from, to;
//         scanf("%d %d", &from, &to);
//         addEdge(from, to);
//     }
    
//     for(int i=0;i<nodes;i++){
//         for(int j=0;j<nodes;j++){
            
//                 printf("%d ",graph[i][j]);
            
//         }
//         printf("\n");
//     }

    
//     return 0;
// }




// // graph using list
// #include <stdio.h>
// #include <stdlib.h>

// // Structure to represent a node in the adjacency list
// struct Node {
//     int data;
//     struct Node* next;
// };

// // Structure to represent the adjacency list for a graph
// struct Graph {
//     int numVertices;
//     struct Node** adjLists;
// };

// // Function to create a new node
// struct Node* createNode(int data) {
//     struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
//     newNode->data = data;
//     newNode->next = NULL;
//     return newNode;
// }

// // Function to create a graph with a given number of vertices
// struct Graph* createGraph(int vertices) {
//     struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
//     graph->numVertices = vertices;
//     graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));

//     for (int i = 0; i < vertices; i++) {
//         graph->adjLists[i] = NULL;
//     }

//     return graph;
// }

// // Function to add an edge to an undirected graph
// void addEdge(struct Graph* graph, int src, int dest) {
//     // Add an edge from src to dest
//     struct Node* newNode = createNode(dest);
//     newNode->next = graph->adjLists[src];
//     graph->adjLists[src] = newNode;


//     newNode = createNode(src);
//     newNode->next = graph->adjLists[dest];
//     graph->adjLists[dest] = newNode;
// }

// // Function to print the adjacency list of the graph
// void printGraph(struct Graph* graph) {
//     for (int v = 0; v < graph->numVertices; v++) {
//         struct Node* temp = graph->adjLists[v];
//         printf("Adjacency list of vertex %d:\n", v);
//         while (temp) {
//             printf("%d -> ", temp->data);
//             temp = temp->next;
//         }
//         printf("NULL\n");
//     }
// }

// int main() {
//     int numVertices, numEdges;

//     printf("Enter the number of vertices: ");
//     scanf("%d", &numVertices);

//     struct Graph* graph = createGraph(numVertices);

//     printf("Enter the number of edges: ");
//     scanf("%d", &numEdges);

//     printf("Enter edges in the format 'from to':\n");
//     for (int i = 0; i < numEdges; i++) {
//         int from, to;
//         scanf("%d %d", &from, &to);
//         addEdge(graph, from, to);
//     }

//     printf("Graph created using adjacency list:\n");
//     printGraph(graph);

//     return 0;
// }





// dfs
// #include <stdio.h>
// #define n 100

// int graph[n][n];
// int visited[n]; // To track visited nodes

// void initializeMatrix(int nodes) {
//     for (int i = 0; i < nodes; i++) {
//         for (int j = 0; j < nodes; j++) {
//             graph[i][j] = 0;
//         }
//     }
// }

// void addEdge(int from, int to) {
//     graph[from][to] = 1;
// }

// void DFS(int graph[n][n], int node) {
//     printf("%d ", node);
//     visited[node] = 1;

//     for (int i = 0; i < n; i++) { // Fixed the loop condition
//         if (graph[node][i] == 1 && visited[i] == 0) {
//             DFS(graph, i);
//         }
//     }
// }

// int main() {
//     int nodes, edges;

//     printf("Enter the number of nodes: ");
//     scanf("%d", &nodes);

//     printf("Enter the number of edges: ");
//     scanf("%d", &edges);

//     initializeMatrix(nodes);

//     printf("Enter edges in the format 'from to':\n");
//     for (int i = 0; i < edges; i++) {
//         int from, to;
//         scanf("%d %d", &from, &to);
//         addEdge(from, to);
//     }

//     for (int i = 0; i < nodes; i++) {
//         visited[i] = 0; // Initialize visited array
//     }

//     int startNode;
//     printf("Enter the starting node for DFS: ");
//     scanf("%d", &startNode);

//     printf("DFS traversal starting from node %d: ", startNode);
//     DFS(graph, startNode);
// }



// bfs
// #include<stdio.h>
// #define n 100

// int graph[n][n];
// int visited[n];

// int queue[n];
// int front = -1,rear = -1;

// void enqueue(int vertex){
//     if(rear == n-1){
//         printf("Overflow\n");
//     }
//     else{
//         if(front == -1){
//             front = 0;
//         }
//         rear++;
//         queue[rear]=vertex;
//     }
// }

// int dequeue(){
//     int vertex =-1;
//     if(front == -1){
//         printf("Underflow\n");
//     }
//     else{
//         vertex = queue[front];
//         front++;
//         if(front > rear){
//             front = rear = -1;
//         }
//     }
//     return vertex;
// }

// void matrixint(int nodes){
//     for(int i=0;i<nodes;i++){
//         for(int j=0;j<nodes;j++){
//             graph[i][j]=0;
//         }
//     }
// }

// void addedge(int from,int to){
//     graph[from][to]=1;
// }

// int isEmpty() {
//     return front == -1;
// }

// void bfs(int startvertex,int vertices){
//     enqueue(startvertex);
//     visited[startvertex]=1;

//     while(!isEmpty()){
//         int currentvertex = dequeue();
//         printf("%d ",currentvertex);
            
//         for(int i=0;i<vertices;i++){
//             if(graph[currentvertex][i] == 1 && visited[i] == 0){
//                 enqueue(i);
//                 visited[i] = i;
//             }
//         }
//     }
// }

// int main(){
//     int nodes, edges;

//     printf("Enter the number of nodes: ");
//     scanf("%d", &nodes);

//     printf("Enter the number of edges: ");
//     scanf("%d", &edges);

//     matrixint(nodes);

//     printf("Enter edges in the format 'from to':\n");
//     for (int i = 0; i < edges; i++) {
//         int from, to;
//         scanf("%d %d", &from, &to);
//         addedge(from, to);
//     }

//     for (int i = 0; i < nodes; i++) {
//         visited[i] = 0; // Initialize visited array
//     }

//     int startNode;
//     printf("Enter the starting node for DFS: ");
//     scanf("%d", &startNode);

//     printf("BFS traversal starting from node %d: ",startNode);
//     bfs(startNode,nodes);
// }
